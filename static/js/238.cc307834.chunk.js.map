{"version":3,"file":"static/js/238.cc307834.chunk.js","mappings":"2MAWA,EATmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,eAAIC,UAAU,wBAAuB,UACjC,SAAC,KAAO,CAACC,GAAIH,EAAME,UAAU,qBAAoB,SAAEH,EAAMK,QAGrE,ECCA,EATgB,SAACL,GACb,OACI,eAAIG,UAAU,wBAAuB,SAChCH,EAAMM,SAGnB,E,kBC0BMC,EAAiB,SAACP,GAEpB,OAAwCQ,EAAAA,EAAAA,MAAjCC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAW/B,OACI,iBAAMC,SAAUF,GATH,SAACG,GACdb,EAAMc,WAAWD,EAAKE,gBACtBC,QAAQC,IAAIJ,EAAKE,gBACjBJ,EAAM,CACFI,eAAgB,IAExB,IAG2C,UACnC,iBAAKZ,UAAU,yBAAwB,WAC/B,6BACIA,UAAU,oBACVe,YAAY,wGACRT,EAAS,iBAAkBU,EAAAA,MACvC,mBAAQhB,UAAU,2BAA0B,SAAC,+DAM7D,EAEA,EAtDgB,SAACH,GAEb,IAAIoB,EAAkBpB,EAAMqB,QACvBC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAAYrB,GAAIqB,EAAErB,GAAIG,KAAMkB,EAAElB,MAAxBkB,EAAErB,GAA6B,IAE1DsB,EAAmBxB,EAAMyB,SACxBH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAAYpB,QAASoB,EAAEpB,SAAjBoB,EAAExB,GAAyB,IAEvD,OACI,iBAAKC,UAAU,cAAa,WACxB,gBAAKA,UAAU,iBAAgB,UAC3B,eAAIA,UAAU,sBAAqB,SAC9BiB,OAGT,iBAAKjB,UAAU,mBAAkB,WAC7B,eAAIA,UAAU,wBAAuB,SAChCqB,KAGL,SAACjB,EAAc,CAACO,WAAYd,EAAMc,kBAIlD,E,0DC3BIa,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE3B,E,oBCgBIE,GAAmBC,EAAAA,EAAAA,UACnBC,EAAAA,EAAAA,KAhBkB,SAACL,GACnB,MAAO,CACHP,QAASO,EAAMM,YAAYb,QAC3BI,SAAUG,EAAMM,YAAYT,SAEpC,IAEyB,SAACU,GACtB,MAAO,CACHrB,WAAY,SAACC,GACToB,GAASC,EAAAA,EAAAA,GAAcrB,GAC3B,EAER,IAIIsB,EAAAA,GDhB4B,SAACC,GAAe,IAEtCC,EAAiB,qGAIlB,OAJkB,8BACnB,WACI,OAAKC,KAAKxC,MAAM6B,QACT,SAACS,GAAS,UAAKE,KAAKxC,SADI,SAAC,KAAQ,CAACI,GAAI,UAEjD,KAAC,EAJkB,CAASqC,EAAAA,WAQhC,OADqCR,EAAAA,EAAAA,IAAQN,EAARM,CAAoCM,EAE7E,GCGuBP,CAIrBU,GAOF,G,kGC9BaL,EAAa,SAACC,GAYvB,OAXA,SAAiCtC,GAC7B,IAAI2C,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACb,OACI,SAACV,GAAS,kBACFtC,GAAK,IACTiD,MAAO,CAAEN,SAAAA,EAAUE,SAAAA,EAAUE,OAAAA,KAGzC,CAEJ,C","sources":["components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","hoc/withRouter.js"],"sourcesContent":["import {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <li className=\"dialogs__name _active\">\r\n            <NavLink to={path} className=\"dialogs__name-text\">{props.name}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default DialogItem","\r\nconst Message = (props) => {\r\n    return(\r\n        <li className=\"dialogs__message-item\">\r\n            {props.message}\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import React from 'react';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {requiredField} from \"../../utils/validators/validator\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogs\r\n        .map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>);\r\n\r\n    let messagesElements = props.messages\r\n        .map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    return (\r\n        <div className=\"dialogs box\">\r\n            <div className=\"dialogs__names\">\r\n                <ul className=\"dialogs__names-list\">\r\n                    {dialogsElements}\r\n                </ul>\r\n            </div>\r\n            <div className=\"dialogs__message\">\r\n                <ul className=\"dialogs__message-list\">\r\n                    {messagesElements}\r\n                </ul>\r\n\r\n                <AddMessageForm addMessage={props.addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const {register, handleSubmit, reset} = useForm();\r\n\r\n\r\n    const onSubmit = (data) => {\r\n        props.addMessage(data.newMessageBody);\r\n        console.log(data.newMessageBody)\r\n        reset({\r\n            newMessageBody: '',\r\n        })\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"dialogs__textarea-wrap\">\r\n                    <textarea\r\n                        className=\"dialogs__textarea\"\r\n                        placeholder='Введите сообщение...'\r\n                        {...register(\"newMessageBody\", requiredField)}/>\r\n                <button className=\"dialogs__textare-btn btn\">\r\n                    Отправить\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, {Component} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={\"/login\"}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}","import {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"../../hoc/withRouter\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\nlet DialogsContainer = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default DialogsContainer","import {useParams} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { useLocation, useNavigate} from \"react-router-dom\";\r\n\r\n\r\nexport const withRouter = (Component) => {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                match={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}"],"names":["props","path","id","className","to","name","message","AddMessageForm","useForm","register","handleSubmit","reset","onSubmit","data","addMessage","newMessageBody","console","log","placeholder","requiredField","dialogsElements","dialogs","map","d","messagesElements","messages","m","mapStateToPropsForRedirect","state","isAuth","auth","DialogsContainer","compose","connect","dialogsPage","dispatch","sendMessageAC","withRouter","Component","RedirectComponent","this","React","Dialogs","location","useLocation","navigate","useNavigate","params","useParams","match"],"sourceRoot":""}